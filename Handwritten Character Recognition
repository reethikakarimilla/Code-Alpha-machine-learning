import tensorflow as tf
tf.compat.v1.losses.sparse_softmax_cross_entropy
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import cv2
from sklearn.model_selection import train_test_split
from sklearn.utils import shuffle
from keras.models import Sequential
from keras.layers import Dense, Flatten, Conv2D, MaxPool2D, Dropout
from tensorflow.keras.optimizers import SGD
from keras import optimizers
from keras.callbacks import ReduceLROnPlateau, EarlyStopping
from tensorflow.keras.utils import to_categorical
Data = pd.read_csv('C:/Users/REETHIKA/OneDrive/Desktop/Handwritten data.csv').astype('float32')
Data.head()
Frame = pd.DataFrame(Data)
Frame.head()
Frame.shape
Frame.info()
Frame.describe()
Frame.isnull().sum()
x = Frame.drop('0', axis = 1)
y = Frame['0']
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.2)
x_train = np.reshape(x_train.values, (x_train.shape[0], 28, 28))
x_test = np.reshape(x_test.values, (x_test.shape[0], 28, 28))
print('Train Data Shape:', x_train.shape)
print('Test Data Shape:', x_test.shape)
Term_Dictionary = {
    0:'A',1:'B',2:'C',3:'D',4:'E',5:'F',6:'G',7:'H',8:'I',9:'J',10:'K',11:'L',12:'M',13:'N',14:'O',15:'P',16:'Q',17:'R',18:'S',19:'T',20:'U',21:'V',22:'W',23:'X', 24:'Y',25:'Z'
}
plt.style.use('fivethirtyeight')
plt.xkcd()

y_integer = np.int0(y)
count = np.zeros(26, dtype = 'int')

for i in y_integer:
    count[i] += 1
    
alphabets = []
for i in Term_Dictionary.values():
    alphabets.append(i)
    
fig, ax = plt.subplots(1, 1, figsize = (3, 3))
ax.barh(alphabets, count)

plt.xlabel('Number Of Elements..!!', fontsize = 20, fontweight = 'bold', color = 'green')
plt.ylabel('Alphabets..!!', fontsize = 30, fontweight = 'bold', color = 'green')
plt.grid()
plt.show()
plt.style.use('fivethirtyeight')
plt.xkcd()
shuff = shuffle(x_train[:100])
fig, ax = plt.subplots(3, 3, figsize = (3, 3))
axes = ax.flatten()
for i in range(9):
shu = cv2.threshold(shuff[i], 30, 200, cv2.THRESH_BINARY)
axes[i].imshow(np.reshape(shuff[i], (28, 28)), cmap = 'Greys')
plt.show()
x_train = x_train.reshape(x_train.shape[0], x_train.shape[1], x_train.shape[2], 1)
print("New shape of train data:", x_train.shape)
x_test = x_test.reshape(x_test.shape[0], x_test.shape[1], x_test.shape[2], 1)
print("New shape of test data:", x_test.shape)
categorical_train = to_categorical(y_train, num_classes = 26, dtype = 'int')
print("New shape of train labels:", categorical_train.shape)
categorical_test = to_categorical(y_test, num_classes = 26, dtype = 'int')
print("New shape of test labels:", categorical_test.shape)
Model.compile(optimizer = 'adam', loss = 'categorical_crossentropy', metrics = ['accuracy'])
history = Model.fit(x_train, categorical_train, epochs = 1, validation_data = (x_test, categorical_test))
Model.summary()
Model.save(r'model_hand.h5')
print("The validation accuracy is :", history.history['val_accuracy'])
print("The training accuracy is :", history.history['accuracy'])
print("The validation loss is :", history.history['val_loss'])
print("The training loss is :", history.history['loss'])
plt.style.use('fivethirtyeight')
plt.xkcd()
fig, axes = plt.subplots(3, 3, figsize = (3, 3))
axes = axes.flatten()
for i, ax in enumerate(axes):
img = np.reshape(x_test[i], (28, 28))
ax.imshow(img, cmap = 'Greys')
Prediction= Term_Dictionary[np.argmax(categorical_test[i])]
ax.set_title("Prediction: " + Prediction, fontsize = 17, fontweight = 'bold', color = 'purple')
ax.grid()
